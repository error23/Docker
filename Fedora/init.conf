#!/bin/bash
#############################################################
# Fichier     :  init.sh
# Auteur      :  ERROR23
# Email       :  error23.d@gmail.com
# OS          :  Linux
# Compilateur :  bash
# Date        :  31/10/2015
# Description :  some scripts global utils
#############################################################

# Declare common script variables
# declare colors
export redForeGround="$(tput bold)$(tput setaf 1)"
export greenForeGround="$(tput bold)$(tput setaf 2)"
export blueForeGround="$(tput bold)$(tput setaf 4)"
export cyanForeGround="$(tput bold)$(tput setaf 6)"
export blackBackground="$(tput bold)$(tput setb 0)"

# Declare some other variables
export prompt="$(whoami)@$(uname --nodename)"
export successTag="$cyanForeGround[$greenForeGround OK $cyanForeGround]"
export failTag="$cyanForeGround[$redForeGround FAIL $cyanForeGround]"

#=====================================#
#             FUNCTIONS
#=====================================#

#
# Indicate if currently connected user is root
#
function isRoot() {
	if [ $EUID -eq 0 ]; then
		echo true
	else
		echo false
	fi
}
export -f isRoot

#
# Prints something in stdin
#
function print() {

	if [ $(isRoot) = true ]; then
		echo -ne "$cyanForeGround""$prompt"'# '$1
	else
		echo -ne "$cyanForeGround""$prompt"'$ '$1
	fi
	echo -ne $cyanForeGround
}
export -f print

#
# Prints something in stdin with '\n' at the end
#
function println() {
	print "$1"
	echo
}
export -f println

#
# Prints one error in stdin
#
function printerr() {

	if [ $(isRoot) = true ]; then
		echo -ne "$redForeGround$prompt# $1"
	else
		echo -ne "$redForeGround$prompt$ $1"
	fi
	echo $cyanForeGround
}
export -f printerr

#
# Prints one error with \n at the end
#
function printerrln() {
	printerr "$1"
	echo -e "\n"
}
export -f printerrln

#
# Converts string to upper case
#
function toupper() {
	local tmp=$1
	echo "${tmp^^}"
}
export -f toupper

#
# Ask yes/no question to user
#
function ask() {

	local input
	local response
	local question="$blueForeGround$prompt (oui/non) ? "

	if [[ -n $1 ]]; then
		local question="$1 (oui/non) ? "
	fi

	while [ -z $response ] || ([ $response != 'O' ] && [ $response != 'N' ]); do
		read -p "$question" -n 1 input
		response=$(toupper $input)
		echo

		if [ -z $response ] || ([ $response != 'O' ] && [ $response != 'N' ]); then
			printerr "Alors explique moi on te demande de tapper oui ou non tu tappe $input WTF ?"
		else
			println "Ok comme tu veut c'est toi le boss"
		fi
	done

	response=$(toupper $input)

	if [ $response = "O" ]; then
		return 1
	else
		return 0
	fi
}
export -f ask

#
# Asserts that one parrameter is set
#
function assertParamValid() {

	if [ -z "$1" ]; then
		printerr "Grr t'as pas mis tout les parametres je crois ?"
		exit 1
	elif [ $1 = '-p' ]; then
		printerr "Grr t'as pas mis tout les parametres je crois ?"

		if [ -n "$2" ]; then
			printerr "$2"
		fi
		exit 1
	fi
}
export -f assertParamValid

#
# Checks if programme is installed
#
function checkInstallation() {

	which $1 &> /dev/null
	if [ "$?" -eq 0 ]; then
		echo true
	else
		echo false
	fi
}
export -f checkInstallation

#
# Prints animating stars
#
function animateStars() {

	local starString=('/' '-' '\' '|' '/' '-' '\' "\*")
	local size=$1
	local i
	local character

	assertParamValid $size

	for ((i = 0; i < $size; i++)); do
		for character in ${starString[@]}; do

			if [ $character = "\*" ]; then
				character='*'
			fi

			echo -n "$character"
			sleep 0.05

			if [ "$character" != '*' ]; then
				echo -en "\b"
			fi
		done
	done
}
export -f animateStars

#
# Wait until one background job finish
#
function waitWithStar() {

	if [[ -n $1 ]]; then
		print "$1"
	fi

	while [[ $(jobs) =~ '&' ]]; do
		echo -ne " ["
		animateStars 1
		echo -ne "]"
		echo -en "\b\b\b\b"
	done

	echo -ne " $successTag"
	echo
}
export -f waitWithStar

#
# Converts one string to array
#
function explode() {
	assertParamValid $1 -p "Tu dois donner une string a exploser"
	assertParamValid $2 -p "Tu dois donner un delimiteur pour diviser ta string"

	local string=$1
	local delimiter=$2

	oldIFS=$IFS
	IFS=$delimiter

	read -r -a array <<< "$string"
	IFS=$oldIFS
}
export -f explode
